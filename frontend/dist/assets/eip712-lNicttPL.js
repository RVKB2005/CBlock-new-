const m={name:"CarbonCredit",version:"1",chainId:1337,verifyingContract:null},f={Attestation:[{name:"gsProjectId",type:"string"},{name:"gsSerial",type:"string"},{name:"ipfsCid",type:"string"},{name:"amount",type:"uint256"},{name:"recipient",type:"address"},{name:"nonce",type:"uint256"}]};async function h(n,e,t){var r;try{if(!n||!e||!t)throw new Error("Missing required parameters for signature generation");const{gsProjectId:i,gsSerial:s,ipfsCid:c,amount:d,recipient:g,nonce:o}=n;if(!i||!s||!c||!g)throw new Error("Missing required attestation data fields");if(typeof d!="number"||d<=0)throw new Error("Amount must be a positive number");if(typeof o!="number"||o<0)throw new Error("Nonce must be a non-negative number");const u={...m,verifyingContract:e};try{const a=await((r=t.provider)==null?void 0:r.getNetwork());a!=null&&a.chainId&&(u.chainId=Number(a.chainId))}catch(a){console.warn("Could not get chain ID from signer, using default:",a.message)}console.log("üîê Generating EIP-712 signature for attestation:",{domain:u,types:f,value:n});const l=await t.signTypedData(u,f,n);return console.log("‚úÖ EIP-712 signature generated successfully"),l}catch(i){throw console.error("‚ùå Failed to generate EIP-712 signature:",i),i.message.includes("user rejected")?new Error("Signature was rejected by user"):i.message.includes("Missing required")?i:new Error(`Failed to generate signature: ${i.message}`)}}function w(n){const{gsProjectId:e,gsSerial:t,ipfsCid:r,amount:i,recipient:s,nonce:c}=n;if(!e||typeof e!="string"||e.trim()==="")throw new Error("Gold Standard Project ID is required");if(!t||typeof t!="string"||t.trim()==="")throw new Error("Gold Standard Serial Number is required");if(!r||typeof r!="string"||r.trim()==="")throw new Error("IPFS CID is required");if(!s||typeof s!="string"||s.trim()==="")throw new Error("Recipient address is required");if(!/^0x[a-fA-F0-9]{40}$/.test(s))throw new Error("Invalid recipient address format");if(typeof i!="number"||i<=0||i>1e6)throw new Error("Amount must be a positive number between 1 and 1,000,000");if(typeof c!="number"||c<0)throw new Error("Nonce must be a non-negative number");if(e.length<3||e.length>50)throw new Error("Gold Standard Project ID must be between 3 and 50 characters");if(t.length<3||t.length>50)throw new Error("Gold Standard Serial Number must be between 3 and 50 characters");const d=["Qm","bafy","baf","k51","z","f01"];if(!(d.some(o=>r.startsWith(o))||/^[a-zA-Z0-9]{46,}$/.test(r)))throw console.error("Invalid IPFS CID format:",{cid:r,length:r.length,startsWithValidPrefix:d.some(o=>r.startsWith(o)),matchesPattern:/^[a-zA-Z0-9]{46,}$/.test(r)}),new Error(`Invalid IPFS CID format: ${r} (length: ${r.length})`);return!0}function p(n,e,t){if(!e)throw new Error("Document object is required for attestation");const r=e.cid||e.ipfsCid||e.hash||e.id;if(!r)throw console.error("‚ùå Document missing IPFS CID:",{document:{id:e.id,cid:e.cid,ipfsCid:e.ipfsCid,hash:e.hash,allProperties:Object.keys(e)}}),new Error("Document is missing IPFS CID. Please ensure the document was uploaded correctly.");return{gsProjectId:n.gsProjectId.trim(),gsSerial:n.gsSerial.trim(),ipfsCid:r,amount:Number(n.amount||e.estimatedCredits||0),recipient:e.uploadedBy,nonce:Number(t)}}export{f as ATTESTATION_TYPES,m as EIP712_DOMAIN,p as createAttestationData,h as signAttestation,w as validateAttestationData};
//# sourceMappingURL=eip712-lNicttPL.js.map
