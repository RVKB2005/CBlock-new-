const w={name:"CarbonCredit",version:"1",chainId:1337,verifyingContract:null},g={Attestation:[{name:"gsProjectId",type:"string"},{name:"gsSerial",type:"string"},{name:"ipfsCid",type:"string"},{name:"amount",type:"uint256"},{name:"recipient",type:"address"},{name:"nonce",type:"uint256"}]};async function l(n,e,r){var i;try{if(!n||!e||!r)throw new Error("Missing required parameters for signature generation");const{gsProjectId:t,gsSerial:o,ipfsCid:s,amount:u,recipient:m,nonce:c}=n;if(!t||!o||!s||!m)throw new Error("Missing required attestation data fields");if(typeof u!="number"||u<=0)throw new Error("Amount must be a positive number");if(typeof c!="number"||c<0)throw new Error("Nonce must be a non-negative number");const d={...w,verifyingContract:e};try{const a=await((i=r.provider)==null?void 0:i.getNetwork());a!=null&&a.chainId&&(d.chainId=Number(a.chainId))}catch(a){console.warn("Could not get chain ID from signer, using default:",a.message)}console.log("🔐 Generating EIP-712 signature for attestation:",{domain:d,types:g,value:n});const f=await r.signTypedData(d,g,n);return console.log("✅ EIP-712 signature generated successfully"),f}catch(t){throw console.error("❌ Failed to generate EIP-712 signature:",t),t.message.includes("user rejected")?new Error("Signature was rejected by user"):t.message.includes("Missing required")?t:new Error(`Failed to generate signature: ${t.message}`)}}function h(n){const{gsProjectId:e,gsSerial:r,ipfsCid:i,amount:t,recipient:o,nonce:s}=n;if(!e||typeof e!="string"||e.trim()==="")throw new Error("Gold Standard Project ID is required");if(!r||typeof r!="string"||r.trim()==="")throw new Error("Gold Standard Serial Number is required");if(!i||typeof i!="string"||i.trim()==="")throw new Error("IPFS CID is required");if(!o||typeof o!="string"||o.trim()==="")throw new Error("Recipient address is required");if(!/^0x[a-fA-F0-9]{40}$/.test(o))throw new Error("Invalid recipient address format");if(typeof t!="number"||t<=0||t>1e6)throw new Error("Amount must be a positive number between 1 and 1,000,000");if(typeof s!="number"||s<0)throw new Error("Nonce must be a non-negative number");if(e.length<3||e.length>50)throw new Error("Gold Standard Project ID must be between 3 and 50 characters");if(r.length<3||r.length>50)throw new Error("Gold Standard Serial Number must be between 3 and 50 characters");if(!i.startsWith("Qm")&&!i.startsWith("bafy"))throw new Error("Invalid IPFS CID format");return!0}function p(n,e,r){return{gsProjectId:n.gsProjectId.trim(),gsSerial:n.gsSerial.trim(),ipfsCid:e.cid,amount:Number(n.amount||e.estimatedCredits||0),recipient:e.uploadedBy,nonce:Number(r)}}export{g as ATTESTATION_TYPES,w as EIP712_DOMAIN,p as createAttestationData,l as signAttestation,h as validateAttestationData};
//# sourceMappingURL=eip712-DXyxYfez.js.map
