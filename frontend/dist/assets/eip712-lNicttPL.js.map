{"version":3,"file":"eip712-lNicttPL.js","sources":["../../src/utils/eip712.js"],"sourcesContent":["/**\r\n * EIP-712 signature utilities for document attestation\r\n */\r\n\r\n// EIP-712 Domain for CarbonCredit contract\r\nexport const EIP712_DOMAIN = {\r\n  name: \"CarbonCredit\",\r\n  version: \"1\",\r\n  chainId: 1337, // Local hardhat network - should be configurable\r\n  verifyingContract: null, // Will be set from contract address\r\n};\r\n\r\n// EIP-712 Types for attestation\r\nexport const ATTESTATION_TYPES = {\r\n  Attestation: [\r\n    { name: \"gsProjectId\", type: \"string\" },\r\n    { name: \"gsSerial\", type: \"string\" },\r\n    { name: \"ipfsCid\", type: \"string\" },\r\n    { name: \"amount\", type: \"uint256\" },\r\n    { name: \"recipient\", type: \"address\" },\r\n    { name: \"nonce\", type: \"uint256\" },\r\n  ],\r\n};\r\n\r\n/**\r\n * Generate EIP-712 signature for document attestation\r\n * @param {Object} attestationData - Attestation data\r\n * @param {string} attestationData.gsProjectId - Gold Standard Project ID\r\n * @param {string} attestationData.gsSerial - Gold Standard Serial Number\r\n * @param {string} attestationData.ipfsCid - IPFS CID of the document\r\n * @param {number} attestationData.amount - Amount of credits to mint\r\n * @param {string} attestationData.recipient - Address to receive the credits\r\n * @param {number} attestationData.nonce - Nonce for replay protection\r\n * @param {string} contractAddress - CarbonCredit contract address\r\n * @param {Object} signer - Ethers signer object\r\n * @returns {Promise<string>} EIP-712 signature\r\n */\r\nexport async function signAttestation(\r\n  attestationData,\r\n  contractAddress,\r\n  signer\r\n) {\r\n  try {\r\n    if (!attestationData || !contractAddress || !signer) {\r\n      throw new Error(\"Missing required parameters for signature generation\");\r\n    }\r\n\r\n    // Validate attestation data\r\n    const { gsProjectId, gsSerial, ipfsCid, amount, recipient, nonce } =\r\n      attestationData;\r\n\r\n    if (!gsProjectId || !gsSerial || !ipfsCid || !recipient) {\r\n      throw new Error(\"Missing required attestation data fields\");\r\n    }\r\n\r\n    if (typeof amount !== \"number\" || amount <= 0) {\r\n      throw new Error(\"Amount must be a positive number\");\r\n    }\r\n\r\n    if (typeof nonce !== \"number\" || nonce < 0) {\r\n      throw new Error(\"Nonce must be a non-negative number\");\r\n    }\r\n\r\n    // Create domain with contract address\r\n    const domain = {\r\n      ...EIP712_DOMAIN,\r\n      verifyingContract: contractAddress,\r\n    };\r\n\r\n    // Get chain ID from signer if available\r\n    try {\r\n      const network = await signer.provider?.getNetwork();\r\n      if (network?.chainId) {\r\n        domain.chainId = Number(network.chainId);\r\n      }\r\n    } catch (error) {\r\n      console.warn(\r\n        \"Could not get chain ID from signer, using default:\",\r\n        error.message\r\n      );\r\n    }\r\n\r\n    console.log(\"üîê Generating EIP-712 signature for attestation:\", {\r\n      domain,\r\n      types: ATTESTATION_TYPES,\r\n      value: attestationData,\r\n    });\r\n\r\n    // Generate signature using EIP-712\r\n    const signature = await signer.signTypedData(\r\n      domain,\r\n      ATTESTATION_TYPES,\r\n      attestationData\r\n    );\r\n\r\n    console.log(\"‚úÖ EIP-712 signature generated successfully\");\r\n    return signature;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Failed to generate EIP-712 signature:\", error);\r\n\r\n    // Provide user-friendly error messages\r\n    if (error.message.includes(\"user rejected\")) {\r\n      throw new Error(\"Signature was rejected by user\");\r\n    }\r\n\r\n    if (error.message.includes(\"Missing required\")) {\r\n      throw error;\r\n    }\r\n\r\n    throw new Error(`Failed to generate signature: ${error.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Validate attestation data before signing\r\n * @param {Object} attestationData - Attestation data to validate\r\n * @throws {Error} If validation fails\r\n */\r\nexport function validateAttestationData(attestationData) {\r\n  const { gsProjectId, gsSerial, ipfsCid, amount, recipient, nonce } =\r\n    attestationData;\r\n\r\n  // Required fields\r\n  if (\r\n    !gsProjectId ||\r\n    typeof gsProjectId !== \"string\" ||\r\n    gsProjectId.trim() === \"\"\r\n  ) {\r\n    throw new Error(\"Gold Standard Project ID is required\");\r\n  }\r\n\r\n  if (!gsSerial || typeof gsSerial !== \"string\" || gsSerial.trim() === \"\") {\r\n    throw new Error(\"Gold Standard Serial Number is required\");\r\n  }\r\n\r\n  if (!ipfsCid || typeof ipfsCid !== \"string\" || ipfsCid.trim() === \"\") {\r\n    throw new Error(\"IPFS CID is required\");\r\n  }\r\n\r\n  if (!recipient || typeof recipient !== \"string\" || recipient.trim() === \"\") {\r\n    throw new Error(\"Recipient address is required\");\r\n  }\r\n\r\n  // Validate Ethereum address format\r\n  if (!/^0x[a-fA-F0-9]{40}$/.test(recipient)) {\r\n    throw new Error(\"Invalid recipient address format\");\r\n  }\r\n\r\n  // Validate amount\r\n  if (typeof amount !== \"number\" || amount <= 0 || amount > 1000000) {\r\n    throw new Error(\"Amount must be a positive number between 1 and 1,000,000\");\r\n  }\r\n\r\n  // Validate nonce\r\n  if (typeof nonce !== \"number\" || nonce < 0) {\r\n    throw new Error(\"Nonce must be a non-negative number\");\r\n  }\r\n\r\n  // Validate Gold Standard Project ID format (basic validation)\r\n  if (gsProjectId.length < 3 || gsProjectId.length > 50) {\r\n    throw new Error(\r\n      \"Gold Standard Project ID must be between 3 and 50 characters\"\r\n    );\r\n  }\r\n\r\n  // Validate Gold Standard Serial Number format (basic validation)\r\n  if (gsSerial.length < 3 || gsSerial.length > 50) {\r\n    throw new Error(\r\n      \"Gold Standard Serial Number must be between 3 and 50 characters\"\r\n    );\r\n  }\r\n\r\n  // Validate IPFS CID format (flexible validation for various CID formats)\r\n  const validCidPrefixes = [\"Qm\", \"bafy\", \"baf\", \"k51\", \"z\", \"f01\"];\r\n  const isValidCid =\r\n    validCidPrefixes.some((prefix) => ipfsCid.startsWith(prefix)) ||\r\n    /^[a-zA-Z0-9]{46,}$/.test(ipfsCid); // Basic length and character check\r\n\r\n  if (!isValidCid) {\r\n    console.error(\"Invalid IPFS CID format:\", {\r\n      cid: ipfsCid,\r\n      length: ipfsCid.length,\r\n      startsWithValidPrefix: validCidPrefixes.some((prefix) =>\r\n        ipfsCid.startsWith(prefix)\r\n      ),\r\n      matchesPattern: /^[a-zA-Z0-9]{46,}$/.test(ipfsCid),\r\n    });\r\n    throw new Error(\r\n      `Invalid IPFS CID format: ${ipfsCid} (length: ${ipfsCid.length})`\r\n    );\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Create attestation data object from form inputs\r\n * @param {Object} formData - Form data from attestation form\r\n * @param {string} document - Document being attested\r\n * @param {number} nonce - Nonce for replay protection\r\n * @returns {Object} Formatted attestation data\r\n */\r\nexport function createAttestationData(formData, document, nonce) {\r\n  // Ensure document has required properties\r\n  if (!document) {\r\n    throw new Error(\"Document object is required for attestation\");\r\n  }\r\n\r\n  // Try to get CID from multiple possible properties\r\n  const ipfsCid =\r\n    document.cid || document.ipfsCid || document.hash || document.id;\r\n\r\n  if (!ipfsCid) {\r\n    console.error(\"‚ùå Document missing IPFS CID:\", {\r\n      document: {\r\n        id: document.id,\r\n        cid: document.cid,\r\n        ipfsCid: document.ipfsCid,\r\n        hash: document.hash,\r\n        allProperties: Object.keys(document),\r\n      },\r\n    });\r\n    throw new Error(\r\n      \"Document is missing IPFS CID. Please ensure the document was uploaded correctly.\"\r\n    );\r\n  }\r\n\r\n  return {\r\n    gsProjectId: formData.gsProjectId.trim(),\r\n    gsSerial: formData.gsSerial.trim(),\r\n    ipfsCid: ipfsCid,\r\n    amount: Number(formData.amount || document.estimatedCredits || 0),\r\n    recipient: document.uploadedBy,\r\n    nonce: Number(nonce),\r\n  };\r\n}\r\n"],"names":["EIP712_DOMAIN","ATTESTATION_TYPES","signAttestation","attestationData","contractAddress","signer","_a","gsProjectId","gsSerial","ipfsCid","amount","recipient","nonce","domain","network","error","signature","validateAttestationData","validCidPrefixes","prefix","createAttestationData","formData","document"],"mappings":"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"}