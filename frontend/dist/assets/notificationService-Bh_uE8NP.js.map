{"version":3,"file":"notificationService-Bh_uE8NP.js","sources":["../../src/services/notificationService.js"],"sourcesContent":["import { toast } from \"react-hot-toast\";\r\nimport authService from \"./auth.js\";\r\n\r\n/**\r\n * Notification Service\r\n * Handles various types of notifications for credit allocations and system events\r\n */\r\nclass NotificationService {\r\n  constructor() {\r\n    this.notificationQueue = [];\r\n    this.isProcessing = false;\r\n    this.permissionRequested = false;\r\n\r\n    // Initialize notification permission on first use\r\n    this.initializeNotifications();\r\n  }\r\n\r\n  /**\r\n   * Initialize notification system\r\n   */\r\n  async initializeNotifications() {\r\n    try {\r\n      // Request notification permission if supported\r\n      if (\"Notification\" in window && !this.permissionRequested) {\r\n        this.permissionRequested = true;\r\n\r\n        if (Notification.permission === \"default\") {\r\n          // Don't request permission immediately, wait for user interaction\r\n          console.log(\r\n            \"📢 Browser notifications available, permission can be requested\"\r\n          );\r\n        }\r\n      }\r\n\r\n      // Set up service worker for background notifications if available\r\n      if (\"serviceWorker\" in navigator) {\r\n        // Register service worker for notifications (optional enhancement)\r\n        console.log(\r\n          \"🔧 Service worker support available for background notifications\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to initialize notifications:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request notification permission from user\r\n   * @returns {Promise<boolean>} Permission granted\r\n   */\r\n  async requestNotificationPermission() {\r\n    try {\r\n      if (!(\"Notification\" in window)) {\r\n        console.warn(\"Browser does not support notifications\");\r\n        return false;\r\n      }\r\n\r\n      if (Notification.permission === \"granted\") {\r\n        return true;\r\n      }\r\n\r\n      if (Notification.permission === \"denied\") {\r\n        console.warn(\"Notification permission denied by user\");\r\n        return false;\r\n      }\r\n\r\n      // Show a friendly prompt first\r\n      const userWantsNotifications = window.confirm(\r\n        \"Would you like to receive notifications when you earn carbon credits? This helps you stay updated on your document verification progress.\"\r\n      );\r\n\r\n      if (!userWantsNotifications) {\r\n        return false;\r\n      }\r\n\r\n      const permission = await Notification.requestPermission();\r\n      const granted = permission === \"granted\";\r\n\r\n      if (granted) {\r\n        toast.success(\r\n          \"🔔 Notifications enabled! You'll be notified when you receive credits.\",\r\n          {\r\n            duration: 5000,\r\n          }\r\n        );\r\n      } else {\r\n        toast.info(\r\n          \"You can enable notifications later in your browser settings.\",\r\n          {\r\n            duration: 4000,\r\n          }\r\n        );\r\n      }\r\n\r\n      return granted;\r\n    } catch (error) {\r\n      console.error(\"Failed to request notification permission:\", error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show credit allocation notification\r\n   * @param {Object} allocation - Allocation data\r\n   * @param {Object} options - Notification options\r\n   */\r\n  async showCreditAllocationNotification(allocation, options = {}) {\r\n    try {\r\n      const {\r\n        showToast = true,\r\n        showBrowserNotification = true,\r\n        priority = \"normal\",\r\n      } = options;\r\n\r\n      console.log(\"📢 Showing credit allocation notification:\", {\r\n        allocationId: allocation.id,\r\n        amount: allocation.amount,\r\n        recipient: allocation.recipientAddress,\r\n      });\r\n\r\n      // Check if user is currently logged in and is the recipient\r\n      const currentUser = authService.getCurrentUser();\r\n      const isCurrentUser =\r\n        currentUser &&\r\n        (currentUser.walletAddress === allocation.recipientAddress ||\r\n          currentUser.email === allocation.recipientEmail);\r\n\r\n      // Show toast notification if user is current recipient\r\n      if (showToast && isCurrentUser) {\r\n        const toastMessage = `🎉 You received ${this.formatAmount(\r\n          allocation.amount\r\n        )} carbon credits from \"${allocation.documentName}\"!`;\r\n\r\n        toast.success(toastMessage, {\r\n          duration: 8000,\r\n          icon: \"💰\",\r\n          style: {\r\n            background: \"#10B981\",\r\n            color: \"white\",\r\n            fontWeight: \"500\",\r\n          },\r\n          position: \"top-right\",\r\n        });\r\n      }\r\n\r\n      // Show browser notification if permission granted\r\n      if (\r\n        showBrowserNotification &&\r\n        \"Notification\" in window &&\r\n        Notification.permission === \"granted\"\r\n      ) {\r\n        const notification = new Notification(\"Carbon Credits Allocated! 💰\", {\r\n          body: `You received ${this.formatAmount(\r\n            allocation.amount\r\n          )} credits from \"${allocation.documentName}\"`,\r\n          icon: \"/favicon.ico\",\r\n          badge: \"/favicon.ico\",\r\n          tag: `credit-allocation-${allocation.id}`,\r\n          requireInteraction: priority === \"high\",\r\n          silent: priority === \"low\",\r\n          data: {\r\n            type: \"credit-allocation\",\r\n            allocationId: allocation.id,\r\n            amount: allocation.amount,\r\n            documentName: allocation.documentName,\r\n          },\r\n        });\r\n\r\n        // Handle notification click\r\n        notification.onclick = () => {\r\n          window.focus();\r\n          notification.close();\r\n\r\n          // Navigate to user dashboard or balance page\r\n          if (window.location.pathname !== \"/\") {\r\n            window.location.href = \"/#balance\";\r\n          }\r\n        };\r\n\r\n        // Auto-close after 10 seconds\r\n        setTimeout(() => {\r\n          notification.close();\r\n        }, 10000);\r\n      }\r\n\r\n      // Log notification for analytics/debugging\r\n      this.logNotification(\"credit-allocation\", {\r\n        allocationId: allocation.id,\r\n        amount: allocation.amount,\r\n        recipient: allocation.recipientAddress,\r\n        documentName: allocation.documentName,\r\n        timestamp: new Date().toISOString(),\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Failed to show credit allocation notification:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show document status notification\r\n   * @param {Object} document - Document data\r\n   * @param {string} status - New status\r\n   * @param {Object} options - Notification options\r\n   */\r\n  async showDocumentStatusNotification(document, status, options = {}) {\r\n    try {\r\n      const { showToast = true } = options;\r\n\r\n      const statusMessages = {\r\n        attested: {\r\n          title: \"Document Attested! ✅\",\r\n          message: `Your document \"${\r\n            document.projectName || document.filename\r\n          }\" has been verified and is ready for minting.`,\r\n          color: \"#10B981\",\r\n        },\r\n        minted: {\r\n          title: \"Credits Minted! 🪙\",\r\n          message: `Carbon credits have been minted for your document \"${\r\n            document.projectName || document.filename\r\n          }\".`,\r\n          color: \"#059669\",\r\n        },\r\n        rejected: {\r\n          title: \"Document Rejected ❌\",\r\n          message: `Your document \"${\r\n            document.projectName || document.filename\r\n          }\" was rejected during verification.`,\r\n          color: \"#DC2626\",\r\n        },\r\n      };\r\n\r\n      const config = statusMessages[status];\r\n      if (!config) return;\r\n\r\n      // Show toast notification\r\n      if (showToast) {\r\n        const toastMethod = status === \"rejected\" ? toast.error : toast.success;\r\n        toastMethod(config.message, {\r\n          duration: 6000,\r\n          style: {\r\n            background: config.color,\r\n            color: \"white\",\r\n          },\r\n        });\r\n      }\r\n\r\n      // Show browser notification\r\n      if (\"Notification\" in window && Notification.permission === \"granted\") {\r\n        const notification = new Notification(config.title, {\r\n          body: config.message,\r\n          icon: \"/favicon.ico\",\r\n          tag: `document-status-${document.id || document.cid}`,\r\n          data: {\r\n            type: \"document-status\",\r\n            documentId: document.id || document.cid,\r\n            status,\r\n          },\r\n        });\r\n\r\n        notification.onclick = () => {\r\n          window.focus();\r\n          notification.close();\r\n        };\r\n\r\n        setTimeout(() => {\r\n          notification.close();\r\n        }, 8000);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to show document status notification:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show system notification\r\n   * @param {string} title - Notification title\r\n   * @param {string} message - Notification message\r\n   * @param {Object} options - Notification options\r\n   */\r\n  async showSystemNotification(title, message, options = {}) {\r\n    try {\r\n      const {\r\n        type = \"info\",\r\n        showToast = true,\r\n        showBrowserNotification = false,\r\n        duration = 5000,\r\n      } = options;\r\n\r\n      // Show toast notification\r\n      if (showToast) {\r\n        const toastMethod =\r\n          {\r\n            success: toast.success,\r\n            error: toast.error,\r\n            warning: toast.error, // Use error styling for warnings\r\n            info: toast.success,\r\n          }[type] || toast.success;\r\n\r\n        toastMethod(message, { duration });\r\n      }\r\n\r\n      // Show browser notification\r\n      if (\r\n        showBrowserNotification &&\r\n        \"Notification\" in window &&\r\n        Notification.permission === \"granted\"\r\n      ) {\r\n        const notification = new Notification(title, {\r\n          body: message,\r\n          icon: \"/favicon.ico\",\r\n          tag: `system-${Date.now()}`,\r\n        });\r\n\r\n        setTimeout(() => {\r\n          notification.close();\r\n        }, duration);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to show system notification:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queue notification for later processing\r\n   * @param {Function} notificationFn - Notification function to execute\r\n   * @param {number} delay - Delay in milliseconds\r\n   */\r\n  queueNotification(notificationFn, delay = 0) {\r\n    this.notificationQueue.push({\r\n      fn: notificationFn,\r\n      delay,\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n    if (!this.isProcessing) {\r\n      this.processNotificationQueue();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process queued notifications\r\n   */\r\n  async processNotificationQueue() {\r\n    if (this.isProcessing || this.notificationQueue.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this.isProcessing = true;\r\n\r\n    try {\r\n      while (this.notificationQueue.length > 0) {\r\n        const notification = this.notificationQueue.shift();\r\n        const elapsed = Date.now() - notification.timestamp;\r\n        const remainingDelay = Math.max(0, notification.delay - elapsed);\r\n\r\n        if (remainingDelay > 0) {\r\n          await new Promise((resolve) => setTimeout(resolve, remainingDelay));\r\n        }\r\n\r\n        try {\r\n          await notification.fn();\r\n        } catch (error) {\r\n          console.error(\"Failed to process queued notification:\", error);\r\n        }\r\n      }\r\n    } finally {\r\n      this.isProcessing = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log notification for analytics/debugging\r\n   * @param {string} type - Notification type\r\n   * @param {Object} data - Notification data\r\n   */\r\n  logNotification(type, data) {\r\n    try {\r\n      const logEntry = {\r\n        type,\r\n        data,\r\n        timestamp: new Date().toISOString(),\r\n        userAgent: navigator.userAgent,\r\n        url: window.location.href,\r\n      };\r\n\r\n      // Store in localStorage for debugging (keep last 100 entries)\r\n      const logs = JSON.parse(\r\n        localStorage.getItem(\"cblock_notification_logs\") || \"[]\"\r\n      );\r\n      logs.push(logEntry);\r\n\r\n      // Keep only last 100 entries\r\n      if (logs.length > 100) {\r\n        logs.splice(0, logs.length - 100);\r\n      }\r\n\r\n      localStorage.setItem(\"cblock_notification_logs\", JSON.stringify(logs));\r\n\r\n      console.log(\"📝 Notification logged:\", logEntry);\r\n    } catch (error) {\r\n      console.error(\"Failed to log notification:\", error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get notification logs for debugging\r\n   * @returns {Array} Notification logs\r\n   */\r\n  getNotificationLogs() {\r\n    try {\r\n      return JSON.parse(\r\n        localStorage.getItem(\"cblock_notification_logs\") || \"[]\"\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Failed to get notification logs:\", error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear notification logs\r\n   */\r\n  clearNotificationLogs() {\r\n    localStorage.removeItem(\"cblock_notification_logs\");\r\n    console.log(\"🗑️ Notification logs cleared\");\r\n  }\r\n\r\n  /**\r\n   * Format amount for display\r\n   * @param {number} amount - Amount to format\r\n   * @returns {string} Formatted amount\r\n   */\r\n  formatAmount(amount) {\r\n    if (!amount) return \"0\";\r\n    return new Intl.NumberFormat(\"en-US\").format(amount);\r\n  }\r\n\r\n  /**\r\n   * Check if notifications are supported and enabled\r\n   * @returns {Object} Notification status\r\n   */\r\n  getNotificationStatus() {\r\n    return {\r\n      supported: \"Notification\" in window,\r\n      permission:\r\n        \"Notification\" in window ? Notification.permission : \"unsupported\",\r\n      enabled:\r\n        \"Notification\" in window && Notification.permission === \"granted\",\r\n      serviceWorkerSupported: \"serviceWorker\" in navigator,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Test notification system\r\n   */\r\n  async testNotifications() {\r\n    try {\r\n      console.log(\"🧪 Testing notification system...\");\r\n\r\n      // Test toast notification\r\n      toast.success(\"🧪 Test notification - Toast working!\", {\r\n        duration: 3000,\r\n      });\r\n\r\n      // Test browser notification if permission granted\r\n      if (\"Notification\" in window && Notification.permission === \"granted\") {\r\n        const notification = new Notification(\"🧪 Test Notification\", {\r\n          body: \"Browser notifications are working correctly!\",\r\n          icon: \"/favicon.ico\",\r\n          tag: \"test-notification\",\r\n        });\r\n\r\n        setTimeout(() => {\r\n          notification.close();\r\n        }, 3000);\r\n      } else if (\r\n        \"Notification\" in window &&\r\n        Notification.permission === \"default\"\r\n      ) {\r\n        const granted = await this.requestNotificationPermission();\r\n        if (granted) {\r\n          // Retry test after permission granted\r\n          setTimeout(() => this.testNotifications(), 1000);\r\n        }\r\n      }\r\n\r\n      console.log(\"✅ Notification test completed\");\r\n    } catch (error) {\r\n      console.error(\"❌ Notification test failed:\", error);\r\n      toast.error(\"Notification test failed: \" + error.message);\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export singleton instance\r\nconst notificationService = new NotificationService();\r\nexport default notificationService;\r\n"],"names":["NotificationService","error","granted","toast","allocation","options","showToast","showBrowserNotification","priority","currentUser","authService","isCurrentUser","toastMessage","notification","document","status","config","title","message","type","duration","notificationFn","delay","elapsed","remainingDelay","resolve","data","logEntry","logs","amount","notificationService"],"mappings":"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"}